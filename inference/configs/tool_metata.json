[
  {
      "name": "maps_regeocode",
      "description": "将一个高德经纬度坐标转换为行政区划地址信息（仅支持中国境内的地点）",
      "server": "AMap-Server",
      "required_params": [
        "location(string): Location"
      ],
      "example": "<code>\nresult = maps_regeocode(location=\"116.434307,39.90909\")\nprint(result) # print return results for analysis\n</code>",
      "domain": "map"
    },
    {
      "name": "maps_geo",
      "description": "将详细的结构化地址转换为经纬度坐标。支持对地标性名胜景区、建筑物名称解析为经纬度坐标（仅支持中国境内的地点）",
      "server": "AMap-Server",
      "required_params": [
        "address(string): Address"
      ],
      "example": "<code>\nresult = maps_geo(address=\"北京市朝阳区阜通东大街6号\")\nprint(result) # print return results for analysis\n</code>",
      "domain": "map"
    },
    {
      "name": "maps_ip_location",
      "description": "IP 定位根据用户输入的 IP 地址，定位 IP 的所在位置（仅支持中国境内的地点）",
      "server": "AMap-Server",
      "required_params": [
        "ip(string): Ip"
      ],
      "example": "<code>\nresult = maps_ip_location(ip=\"127.0.0.1\")\nprint(result) # print return results for analysis\n</code>",
      "domain": "map"
    },
    {
      "name": "maps_weather",
      "description": "根据城市名称或者标准adcode查询指定城市的天气（仅支持中国境内的地点，且只支持实时的查询）",
      "server": "AMap-Server",
      "required_params": [
        "city(string): City"
      ],
      "example": "<code>\nresult = maps_weather(city=\"北京市\")\nprint(result) # print return results for analysis\n</code>",
      "domain": "map"
    },
    {
      "name": "maps_bicycling_by_address",
      "description": "Plans a bicycle route between two locations using addresses. Unless you have a specific reason to use coordinates, it's recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. \"北京市朝阳区阜通东大街6号\")\n        destination_address (str): Ending point address (e.g. \"北京市海淀区上地十街10号\")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n（仅支持中国境内的地点）",
      "server": "AMap-Server",
      "required_params": [
        "origin_address(string): Origin Address",
        "destination_address(string): Destination Address"
      ],
      "example": "<code>\nresult = maps_bicycling_by_address(origin_address=\"北京市朝阳区阜通东大街6号\", destination_address=\"北京市海淀区上地十街10号\")\nprint(result) # print return results for analysis\n</code>",
      "domain": "map"
    },
    {
      "name": "maps_bicycling_by_coordinates",
      "description": "Plans a bicycle route between two coordinates.\n    \n    Args:\n        origin_coordinates (str): Starting point coordinates in the format \"longitude,latitude\" (e.g. \"116.434307,39.90909\")\n        destination_coordinates (str): Ending point coordinates in the format \"longitude,latitude\" (e.g. \"116.434307,39.90909\")\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers bridges, one-way streets, and road closures. Supports routes up to 500km.\n（仅支持中国境内的地点）",
      "server": "AMap-Server",
      "required_params": [
        "origin_coordinates(string): Origin Coordinates",
        "destination_coordinates(string): Destination Coordinates"
      ],
      "example": "<code>\nresult = maps_bicycling_by_coordinates(origin_coordinates=\"116.434307,39.90909\", destination_coordinates=\"116.434307,39.90909\")\nprint(result) # print return results for analysis\n</code>",
      "domain": "map"
    },
    {
      "name": "maps_direction_walking_by_address",
      "description": "Plans a walking route between two locations using addresses. Unless you have a specific reason to use coordinates, it's recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. \"北京市朝阳区阜通东大街6号\")\n        destination_address (str): Ending point address (e.g. \"北京市海淀区上地十街10号\")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Supports routes up to 100km.\n（仅支持中国境内的地点）",
      "server": "AMap-Server",
      "required_params": [
        "origin_address(string): Origin Address",
        "destination_address(string): Destination Address"
      ],
      "example": "<code>\nresult = maps_direction_walking_by_address(origin_address=\"北京市朝阳区阜通东大街6号\", destination_address=\"北京市海淀区上地十街10号\")\nprint(result) # print return results for analysis\n</code>",
      "domain": "map"
    },
    {
      "name": "maps_direction_walking_by_coordinates",
      "description": "步行路径规划 API 可以根据输入起点终点经纬度坐标规划100km 以内的步行通勤方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为\"经度,纬度\" (例如：\"116.434307,39.90909\")\n        destination (str): 终点经纬度坐标，格式为\"经度,纬度\" (例如：\"116.434307,39.90909\")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n（仅支持中国境内的地点）",
      "server": "AMap-Server",
      "required_params": [
        "origin(string): Origin",
        "destination(string): Destination"
      ],
      "example": "<code>\nresult = maps_direction_walking_by_coordinates(origin=\"116.434307,39.90909\", destination=\"116.434307,39.90909\")\nprint(result) # print return results for analysis\n</code>",
      "domain": "map"
    },
    {
      "name": "maps_direction_driving_by_address",
      "description": "Plans a driving route between two locations using addresses. Unless you have a specific reason to use coordinates, it's recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. \"北京市朝阳区阜通东大街6号\")\n        destination_address (str): Ending point address (e.g. \"北京市海淀区上地十街10号\")\n        origin_city (Optional[str]): Optional city name for the origin address to improve geocoding accuracy\n        destination_city (Optional[str]): Optional city name for the destination address to improve geocoding accuracy\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and turn-by-turn instructions.\n        Considers traffic conditions and road restrictions.\n（仅支持中国境内的地点）",
      "server": "AMap-Server",
      "required_params": [
        "origin_address(string): Origin Address",
        "destination_address(string): Destination Address"
      ],
      "example": "<code>\nresult = maps_direction_driving_by_address(origin_address=\"北京市朝阳区阜通东大街6号\", destination_address=\"北京市海淀区上地十街10号\")\nprint(result) # print return results for analysis\n</code>",
      "domain": "map"
    },
    {
      "name": "maps_direction_driving_by_coordinates",
      "description": "驾车路径规划 API 可以根据用户起终点经纬度坐标规划以小客车、轿车通勤出行的方案，并且返回通勤方案的数据\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为\"经度,纬度\" (例如：\"116.434307,39.90909\")\n        destination (str): 终点经纬度坐标，格式为\"经度,纬度\" (例如：\"116.434307,39.90909\")\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细导航信息的路线数据\n（仅支持中国境内的地点）",
      "server": "AMap-Server",
      "required_params": [
        "origin(string): Origin",
        "destination(string): Destination"
      ],
      "example": "<code>\nresult = maps_direction_driving_by_coordinates(origin=\"116.434307,39.90909\", destination=\"116.434307,39.90909\")\nprint(result) # print return results for analysis\n</code>",
      "domain": "map"
    },
    {
      "name": "maps_direction_transit_integrated_by_address",
      "description": "Plans a public transit route between two locations using addresses. Unless you have a specific reason to use coordinates, it's recommended to use this tool.\n    \n    Args:\n        origin_address (str): Starting point address (e.g. \"北京市朝阳区阜通东大街6号\")\n        destination_address (str): Ending point address (e.g. \"北京市海淀区上地十街10号\")\n        origin_city (str): City name for the origin address (required for cross-city transit)\n        destination_city (str): City name for the destination address (required for cross-city transit)\n        \n    Returns:\n        Dict[str, Any]: Route information including distance, duration, and detailed transit instructions.\n        Considers various public transit options including buses, subways, and trains.\n（仅支持中国境内的地点）",
      "server": "AMap-Server",
      "required_params": [
        "origin_address(string): Origin Address",
        "destination_address(string): Destination Address",
        "origin_city(string): Origin City",
        "destination_city(string): Destination City"
      ],
      "example": "<code>\nresult = maps_direction_transit_integrated_by_address(origin_address=\"北京市朝阳区阜通东大街6号\", destination_address=\"北京市海淀区上地十街10号\", origin_city=\"北京市\", destination_city=\"北京市\")\nprint(result) # print return results for analysis\n</code>",
      "domain": "map"
    },
    {
      "name": "maps_direction_transit_integrated_by_coordinates",
      "description": "根据用户起终点经纬度坐标规划综合各类公共（火车、公交、地铁）交通方式的通勤方案，并且返回通勤方案的数据，跨城场景下必须传起点城市与终点城市\n    \n    Args:\n        origin (str): 起点经纬度坐标，格式为\"经度,纬度\" (例如：\"116.434307,39.90909\")\n        destination (str): 终点经纬度坐标，格式为\"经度,纬度\" (例如：\"116.434307,39.90909\")\n        city (str): 起点城市名称\n        cityd (str): 终点城市名称\n        \n    Returns:\n        Dict[str, Any]: 包含距离、时长和详细公共交通信息的路线数据\n（仅支持中国境内的地点）",
      "server": "AMap-Server",
      "required_params": [
        "origin(string): Origin",
        "destination(string): Destination",
        "city(string): City",
        "cityd(string): Cityd"
      ],
      "example": "<code>\nresult = maps_direction_transit_integrated_by_coordinates(origin=\"116.434307,39.90909\", destination=\"116.434307,39.90909\", city=\"北京市\", cityd=\"北京市\")\nprint(result) # print return results for analysis\n</code>",
      "domain": "map"
    },
    {
      "name": "maps_distance",
      "description": "测量两个经纬度坐标之间的距离,支持驾车、步行以及球面距离测量，`type` = \"1\"(驾车) / \"3\"(步行) / \"0\"(直线球面距离)。（仅支持中国境内的地点）",
      "server": "AMap-Server",
      "required_params": [
        "origins(string): Origins",
        "destination(string): Destination",
        "type(string): Type"
      ],
      "example": "<code>\nresult = maps_distance(origins=\"121.434307,31.20909\", destination=\"121.434307,31.20909\")\nprint(result) # print return results for analysis\n</code>",
      "domain": "map"
    },
    {
      "name": "maps_text_search",
      "description": "关键词搜索 API 根据用户输入的关键字进行 POI 搜索，并返回相关的信息，支持城市限制。（仅支持中国境内的地点）",
      "server": "AMap-Server",
      "required_params": [
        "keywords(string): Keywords",
        "city(string): City"
      ],
      "example": "<code>\nresults = maps_text_search(keywords=\"地标\", city=\"上海\")\nprint(\"搜索结果：\", results)</code>",
      "domain": "map"
    },
    {
      "name": "maps_around_search",
      "description": "周边搜，根据用户传入关键词以及坐标location，搜索出radius半径范围的POI（仅支持中国境内的地点）",
      "server": "AMap-Server",
      "required_params": [
        "location(string): Location",
        "radius(int): Radius",
        "keywords(string): Keywords"
      ],
      "example": "<code>\nresults = maps_around_search(location=\"121.434307,31.20909\", radius=1000, keywords=\"地标\")\nprint(\"搜索结果：\", results)</code>",
      "domain": "map"
    },
    {
      "name": "maps_search_detail",
      "description": "查询关键词搜或者周边搜获取到的POI ID的详细信息（仅支持中国境内的地点）",
      "server": "AMap-Server",
      "required_params": [
        "id(string): Id"
      ],
      "example": "<code>\nresult = maps_search_detail(id=\"1234567890\")\nprint(result) # print return results for analysis\n</code>",
      "domain": "map"
    },
    {
      "name": "web_search",
      "description": "Only support to check if the company has correspoding stock ticker symbol, and corresponding section it belongs to\n",
      "server": "Web-Server",
      "required_params": [
        "query(string): query to search for, such as 'What is the stock ticker symbol of Apple'"
      ],
      "example": "<code>\nresult = web_search(query='What is the stock ticker symbol of Apple')\nprint(result) # print return results for analysis\n</code>",
      "domain": "finance"
    },
    {
      "name": "get_company_notes",
      "description": "\n    Get detailed information about company-issued notes\n    \n    Args:\n        symbol: Stock ticker symbol (e.g., AAPL, MSFT, TSLA)\n        \n    Returns:\n        Information about company notes and debt instruments\n    ",
      "server": "FMP-Server",
      "required_params": [
        "symbol(string): Symbol"
      ],
      "example": "<code>\nresult = get_company_notes(symbol='AAPL')\nprint(result) # print return results for analysis\n</code>",
      "domain": "finance"
    },
    {
      "name": "get_income_statement",
      "description": "\n    Get income statement for a company\n    \n    Args:\n        symbol: Stock ticker symbol (e.g., AAPL, MSFT, TSLA)\n        period: Data period - \"annual\" or \"quarter\"\n        limit: Number of periods to return (1-120)\n        \n    Returns:\n        Income statement data\n    ",
      "server": "FMP-Server",
      "required_params": [
        "symbol(string): Symbol"
      ],
      "example": "<code>\nresult = get_income_statement(symbol='AAPL')\nprint(result) # print return results for analysis\n</code>",
      "domain": "finance"
    },
    {
      "name": "get_quote",
      "description": "\n    Get current stock quote information\n    \n    Args:\n        symbol: Ticker symbol (e.g., AAPL, MSFT, TSLA, SPY, ^GSPC, BTCUSD)\n        \n    Returns:\n        Current price and related information\n    ",
      "server": "FMP-Server",
      "required_params": [
        "symbol(string): Symbol"
      ],
      "example": "<code>\nresult = get_quote(symbol='AAPL')\nprint(result) # print return results for analysis\n</code>",
      "domain": "finance"
    },
    {
      "name": "get_quote_change",
      "description": "\n    Get stock price change over different time periods\n    \n    Args:\n        symbol: Ticker symbol (e.g., AAPL, MSFT, TSLA)\n        \n    Returns:\n        Price change information over multiple time periods\n    ",
      "server": "FMP-Server",
      "required_params": [
        "symbol(string): Symbol"
      ],
      "example": "<code>\nresult = get_quote_change(symbol='AAPL')\nprint(result) # print return results for analysis\n</code>",
      "domain": "finance"
    },
    {
      "name": "get_aftermarket_quote",
      "description": "\n    Get aftermarket trading quote information\n    \n    Args:\n        symbol: Ticker symbol (e.g., AAPL, MSFT, TSLA)\n        \n    Returns:\n        Aftermarket bid/ask prices, sizes, volume, and timestamp\n    ",
      "server": "FMP-Server",
      "required_params": [
        "symbol(string): Symbol"
      ],
      "example": "<code>\nresult = get_aftermarket_quote(symbol='AAPL')\nprint(result) # print return results for analysis\n</code>",
      "domain": "finance"
    },
    {
      "name": "get_price_change",
      "description": "\n    Get price changes for a stock based on historical data\n    \n    Args:\n        symbol: Stock ticker symbol (e.g., AAPL, MSFT)\n        \n    Returns:\n        Price changes over recent time periods\n    ",
      "server": "FMP-Server",
      "required_params": [
        "symbol(string): Symbol"
      ],
      "example": "<code>\nresult = get_price_change(symbol='AAPL')\nprint(result) # print return results for analysis\n</code>",
      "domain": "finance"
    },
    {
      "name": "search_by_symbol",
      "description": "\n    Search for stocks by ticker symbol\n    \n    Args:\n        query: Symbol to search for (e.g., \"AAPL\", \"MSFT\")\n        limit: Maximum number of results to return (default: 10)\n        exchange: Filter by specific exchange (e.g., \"NASDAQ\", \"NYSE\")\n        \n    Returns:\n        List of matching stocks with their details\n    ",
      "server": "FMP-Server",
      "required_params": [
        "query(string): Query"
      ],
      "example": "<code>\nresult = search_by_symbol(query='AAPL')\nprint(result) # print return results for analysis\n</code>",
      "domain": "finance"
    },
    {
      "name": "search_by_name",
      "description": "\n    Search for stocks by company name, only support english company name\n    \n    Args:\n        query: Company name to search for (e.g., \"Apple\", \"Microsoft\")\n        limit: Maximum number of results to return (default: 10)\n        exchange: Filter by specific exchange (e.g., \"NASDAQ\", \"NYSE\")\n        \n    Returns:\n        List of matching companies with their details\n    ",
      "server": "FMP-Server",
      "required_params": [
        "query(string): Query"
      ],
      "example": "<code>\nresult = search_by_name(query='Apple')\nprint(result) # print return results for analysis\n</code>",
      "domain": "finance"
    },
    {
      "name": "get_ratings_snapshot",
      "description": "\n    Get analyst ratings snapshot for a company\n    \n    Args:\n        symbol: Stock ticker symbol (e.g., AAPL, MSFT, TSLA)\n        \n    Returns:\n        Current analyst ratings and consensus\n    ",
      "server": "FMP-Server",
      "required_params": [
        "symbol(string): Symbol"
      ],
      "example": "<code>\nresult = get_ratings_snapshot(symbol='AAPL')\nprint(result) # print return results for analysis\n</code>",
      "domain": "finance"
    },
    {
      "name": "get_financial_estimates",
      "description": "\n    Get analyst financial estimates for a company\n    \n    Args:\n        symbol: Stock ticker symbol (e.g., AAPL, MSFT, TSLA)\n        period: Period of estimates - \"annual\" or \"quarter\"\n        limit: Number of estimates to return (1-1000)\n        page: Page number for pagination (0-based)\n        \n    Returns:\n        Analyst estimates for revenue, EPS, and other metrics\n    ",
      "server": "FMP-Server",
      "required_params": [
        "symbol(string): Symbol"
      ],
      "example": "<code>\nresult = get_financial_estimates(symbol='AAPL', period='annual')\nprint(result) # print return results for analysis\n</code>",
      "domain": "finance"
    },
    {
      "name": "get_price_target_news",
      "description": "\n    Get latest analyst price target updates\n    \n    Args:\n        symbol: Optional stock ticker symbol to filter by (e.g., AAPL, MSFT)\n        limit: Number of updates to return (1-1000)\n        \n    Returns:\n        Latest price target updates from analysts\n    ",
      "server": "FMP-Server",
      "required_params": [],
      "example": "<code>\nresult = get_price_target_news(symbol='AAPL')\nprint(result) # print return results for analysis\n</code>",
      "domain": "finance"
    },
    {
      "name": "get_price_target_latest_news",
      "description": "\n    Get latest price target announcements with pagination\n    \n    Args:\n        page: Page number (starts at 0)\n        limit: Number of results to return (1-1000)\n        \n    Returns:\n        Latest price target announcements from analysts\n    ",
      "server": "FMP-Server",
      "required_params": [],
      "example": "<code>\nresult = get_price_target_latest_news()\nprint(result) # print return results for analysis\n</code>",
      "domain": "finance"
    },
    {
      "name": "get_company_dividends",
      "description": "\n    Get dividend history for a specific company\n    \n    Args:\n        symbol: Stock ticker symbol (e.g., AAPL, MSFT, JNJ)\n        limit: Number of dividend records to return (1-1000)\n        \n    Returns:\n        Historical dividend payments and upcoming dividends\n    ",
      "server": "FMP-Server",
      "required_params": [
        "symbol(string): Symbol"
      ],
      "example": "<code>\nresult = get_company_dividends(symbol='AAPL')\nprint(result) # print return results for analysis\n</code>",
      "domain": "finance"
    },
    {
      "name": "get_dividends_calendar",
      "description": "\n    Get upcoming dividend events for all stocks\n    \n    Args:\n        from_date: Start date in YYYY-MM-DD format (defaults to today)\n        to_date: End date in YYYY-MM-DD format (defaults to 30 days from today)\n        limit: Number of events to return (1-3000)\n        \n    Returns:\n        Calendar of upcoming dividend events\n    ",
      "server": "FMP-Server",
      "required_params": [],
      "example": "<code>\nresult = get_dividends_calendar(from_date='2024-01-01', to_date='2024-12-31')\nprint(result) # print return results for analysis\n</code>",
      "domain": "finance"
    },
    {
      "name": "get_index_list",
      "description": "\n    Get a list of available market indices\n    \n    Returns:\n        List of market indices with their symbols, names, and exchanges\n    ",
      "server": "FMP-Server",
      "required_params": [],
      "example": "<code>\nresult = get_index_list()\nprint(result) # print return results for analysis\n</code>",
      "domain": "finance"
    },
    {
      "name": "get_index_quote",
      "description": "\n    Get current quote for a market index\n    \n    Args:\n        symbol: Index symbol (e.g., ^GSPC for S&P 500, ^DJI for Dow Jones)\n        \n    Returns:\n        Current value and change information for the specified index\n    ",
      "server": "FMP-Server",
      "required_params": [
        "symbol(string): Symbol"
      ],
      "example": "<code>\nresult = get_index_quote(symbol='^GSPC')\nprint(result) # print return results for analysis\n</code>",
      "domain": "finance"
    },
    {
      "name": "get_biggest_gainers",
      "description": "\n    Get a list of stocks with the biggest percentage gains\n    \n    Args:\n        limit: Number of gainers to return (1-100)\n        \n    Returns:\n        List of stocks with the highest percentage gains\n    ",
      "server": "FMP-Server",
      "required_params": [],
      "example": "<code>\nresult = get_biggest_gainers()\nprint(result) # print return results for analysis\n</code>",
      "domain": "finance"
    },
    {
      "name": "get_biggest_losers",
      "description": "\n    Get a list of stocks with the biggest percentage losses\n    \n    Args:\n        limit: Number of losers to return (1-100)\n        \n    Returns:\n        List of stocks with the highest percentage drops\n    ",
      "server": "FMP-Server",
      "required_params": [],
      "example": "<code>\nresult = get_biggest_losers()\nprint(result) # print return results for analysis\n</code>",
      "domain": "finance"
    },
    {
      "name": "get_most_active",
      "description": "\n    Get a list of most actively traded stocks by volume\n    \n    Args:\n        limit: Number of stocks to return (1-100)\n        \n    Returns:\n        List of most actively traded stocks\n    ",
      "server": "FMP-Server",
      "required_params": [],
      "example": "<code>\nresult = get_most_active()\nprint(result) # print return results for analysis\n</code>",
      "domain": "finance"
    },
    {
      "name": "get_market_hours",
      "description": "\n    Get the current market hours status for a specific stock exchange\n    \n    Args:\n        exchange: Exchange code (e.g., NASDAQ, NYSE, LSE)\n        \n    Returns:\n        Current market hours status for the specified stock exchange\n    ",
      "server": "FMP-Server",
      "required_params": [],
      "example": "<code>\nresult = get_market_hours(exchange='NASDAQ')\nprint(result) # print return results for analysis\n</code>",
      "domain": "finance"
    },
    {
      "name": "get_commodities_list",
      "description": "\n    Get a list of available commodities\n    \n    Returns:\n        List of available commodities with their symbols\n    ",
      "server": "FMP-Server",
      "required_params": [],
      "example": "<code>\nresult = get_commodities_list()\nprint(result) # print return results for analysis\n</code>",
      "domain": "finance"
    },
    {
      "name": "get_commodities_prices",
      "description": "\n    Get current prices for commodities\n    \n    Args:\n        symbol: commodity symbol (e.g., \"OUSX\")\n                If not provided, returns all available commodities\n    \n    Returns:\n        Current prices for the specified commodities\n    ",
      "server": "FMP-Server",
      "required_params": [],
      "example": "<code>\nresult = get_commodities_prices(symbol='OUSX')\nprint(result) # print return results for analysis\n</code>",
      "domain": "finance"
    },
    {
      "name": "get_historical_price_eod_light",
      "description": "\n    Get historical price data for a commodity from the EOD light API\n    \n    Args:\n        symbol: The commodity symbol (e.g., \"GCUSD\" for Gold)\n        limit: Optional number of results to return\n        from_date: Optional start date in format \"YYYY-MM-DD\"\n        to_date: Optional end date in format \"YYYY-MM-DD\"\n    \n    Returns:\n        Historical price data formatted as markdown\n    ",
      "server": "FMP-Server",
      "required_params": [
        "symbol(string): Symbol"
      ],
      "example": "<code>\nresult = get_historical_price_eod_light(symbol='GCUSD')\nprint(result) # print return results for analysis\n</code>",
      "domain": "finance"
    },
    {
      "name": "get_crypto_list",
      "description": "\n    Get a list of available cryptocurrencies\n    \n    Returns:\n        List of available cryptocurrencies with their symbols\n    ",
      "server": "FMP-Server",
      "required_params": [],
      "example": "<code>\nresult = get_crypto_list()\nprint(result) # print return results for analysis\n</code>",
      "domain": "finance"
    },
    {
      "name": "get_crypto_quote",
      "description": "\n    Get current quotes for cryptocurrencies\n    \n    Args:\n        symbol: Comma-separated list of cryptocurrency symbols (e.g., \"BTCUSD,ETHUSD\")\n                If not provided, returns top cryptocurrencies by market cap\n    \n    Returns:\n        Current quotes for the specified cryptocurrencies\n    ",
      "server": "FMP-Server",
      "required_params": [],
      "example": "<code>\nresult = get_crypto_quote(symbol='BTCUSD')\nprint(result) # print return results for analysis\n</code>",
      "domain": "finance"
    },
    {
      "name": "get_forex_list",
      "description": "\n    Get a list of available forex pairs\n    \n    Returns:\n        List of available forex pairs with their currency names\n    ",
      "server": "FMP-Server",
      "required_params": [],
      "example": "<code>\nresult = get_forex_list()\nprint(result) # print return results for analysis\n</code>",
      "domain": "finance"
    },
    {
      "name": "get_forex_quotes",
      "description": "\n    Get current quote for a forex pair\n    \n    Args:\n        symbol: Forex pair symbol (e.g., \"EURUSD\")\n    \n    Returns:\n        Current quote data for the specified forex pair\n    ",
      "server": "FMP-Server",
      "required_params": [
        "symbol(string): Symbol"
      ],
      "example": "<code>\nresult = get_forex_quotes(symbol='EURUSD')\nprint(result) # print return results for analysis\n</code>",
      "domain": "finance"
    },
    {
      "name": "get_ema",
      "description": "\n    Get Exponential Moving Average (EMA) values for a stock\n    \n    Args:\n        symbol: Stock symbol (e.g., AAPL, MSFT)\n        period_length: Period length for the EMA calculation (default: 10)\n        timeframe: Time frame for data (options: 1min, 5min, 15min, 30min, 1hour, 4hour, 1day)\n        from_date: Start date for data in format YYYY-MM-DD (optional)\n        to_date: End date for data in format YYYY-MM-DD (optional)\n        \n    Returns:\n        EMA values for the specified stock with price data\n    ",
      "server": "FMP-Server",
      "required_params": [
        "symbol(string): Symbol"
      ],
      "example": "<code>\nresult = get_ema(symbol='AAPL', period_length=10)\nprint(result) # print return results for analysis\n</code>",
      "domain": "finance"
    },
    {
      "name": "web_search",
      "description": "Only support to check if the company has correspoding stock ticker symbol, and corresponding section it belongs to\n",
      "server": "Web-Server",
      "required_params": [
        "query(string): query to search for, such as 'What is the stock ticker symbol of Apple'"
      ],
      "example": "<code>\nresult = web_search(query='What is the stock ticker symbol of Apple')\nprint(result) # print return results for analysis\n</code>",
      "domain": "bio"
    },
    {
      "name": "search",
      "description": "Universal search across all biomedical domains with a unified query language.\n\n支持跨域检索：\n- 论文/文章、临床试验、变异、基因、药物、疾病\n- NCI: 组织/干预/生物标志物/疾病\n- FDA: 不良事件、药品说明书、医疗器械、批准、召回、缺货\n\n可用统一语法组合关键词、基因/疾病/变异/化合物过滤，或按地理坐标筛选试验地点。",
      "server": "BioMCP-Server",
      "required_params": [
        "query(string|None): 统一查询语法（可包含布尔、字段限定等）",
        "domain('article'|'trial'|'variant'|'gene'|'drug'|'disease'|'nci_organization'|'nci_intervention'|'nci_biomarker'|'nci_disease'|'fda_adverse'|'fda_label'|'fda_device'|'fda_approval'|'fda_recall'|'fda_shortage'|None): 目标检索域",
        "genes(string[]|None): 需过滤的基因符号列表",
        "diseases(string[]|None): 疾病或适应症术语列表",
        "variants(string[]|None): 变异标注（HGVS 等）列表",
        "chemicals(string[]|None): 药物或化学品名称列表",
        "keywords(string[]|None): 额外关键词列表",
        "conditions(string[]|None): 临床试验的条件/疾病过滤",
        "interventions(string[]|None): 临床试验的干预措施过滤",
        "lat(float|None): 临近试验检索的纬度",
        "long(float|None): 临近试验检索的经度",
        "page(int|None): 结果页码（默认 1）",
        "page_size(int|None): 每页条数（默认 10）",
        "api_key(string|None): NCI/FDA 等域可能需要的 API Key"
      ],
      "example": "<code>\nresult = search(query='BRCA1', domain='article', page=1, page_size=10)\nprint(result)\n</code>",
      "domain": "bio"
    },
    {
      "name": "fetch",
      "description": "Retrieve detailed information for any biomedical record; auto-detects domain if not provided.\n\n支持用统一 ID 拉取详情：\n- 文章（PMID/DOI）、临床试验（NCT ID）\n- 变异（HGVS/rsID）、基因/药物/疾病名\n- FDA（不良事件/标签/器械/批准/召回/缺货）等。\n可选指定 trial 的具体片段（protocol/locations/outcomes/references/all）。",
      "server": "BioMCP-Server",
      "required_params": [
        "id(string): 记录标识（PMID/DOI、NCT、HGVS/rsID、名称或 FDA 标识）",
        "domain('article'|'trial'|'variant'|'gene'|'drug'|'disease'|'fda_adverse'|'fda_label'|'fda_device'|'fda_approval'|'fda_recall'|'fda_shortage'|None): 可选的域覆盖（留空则自动识别）",
        "detail('protocol'|'locations'|'outcomes'|'references'|'all'|None): 指定试验详情片段",
        "api_key(string|None): NCI/FDA 记录可能需要的 API Key"
      ],
      "example": "<code>\ntrial = fetch(id=\"NCT01234567\", domain='trial', detail='outcomes')\nprint(trial)\n</code>",
      "domain": "bio"
    },
    {
      "name": "article_searcher",
      "description": "Search PubMed/PubTator3 for research articles and preprints.\n\nUse this tool to find scientific literature ABOUT genes, variants, diseases, or chemicals.\nResults include articles from PubMed and optionally preprints from bioRxiv/medRxiv.\n\nImportant: This searches for ARTICLES ABOUT these topics, not database records.\nFor genetic variant database records, use variant_searcher instead.\n\nExample usage:\n- Find articles about BRAF mutations in melanoma\n- Search for papers on a specific drug's effects\n- Locate research on gene-disease associations\n",
      "server": "BioMCP-Server",
      "required_params": [
        "chemicals(list[string]|string|None): Chemical/drug names to search for",
        "diseases(list[string]|string|None): Disease names to search for",
        "genes(list[string]|string|None): Gene symbols to search for",
        "keywords(list[string]|string|None): Free-text keywords to search for",
        "variants(list[string]|string|None): Variant strings to search for (e.g., 'V600E', 'p.D277Y')",
        "include_preprints(bool): Include preprints from bioRxiv/medRxiv",
        "include_cbioportal(bool): Include cBioPortal cancer genomics summary when searching by gene",
        "page(int): Page number (1-based)",
        "page_size(int): Results per page"
      ],
      "example": "<code>\nresult = article_searcher('BRAF mutations in melanoma')\nprint(result) # print return results for analysis\n</code>",
      "domain": "bio"
    },
    {
      "name": "article_getter",
      "description": "Fetch detailed information for a specific article.\n\nRetrieves the full abstract and available text for an article by its identifier.\nSupports:\n- PubMed IDs (PMID) for published articles\n- PMC IDs for articles in PubMed Central\n- DOIs for preprints from Europe PMC\n\nReturns formatted text including:\n- Title\n- Abstract\n- Full text (when available from PMC for published articles)\n- Source information (PubMed or Europe PMC)\n",
      "server": "BioMCP-Server",
      "required_params": [
        "pmid(string): Pmid"
      ],
      "example": "<code>\nresult = article_getter(pmid='31452104')\nprint(result) # print return results for analysis\n</code>",
      "domain": "bio"
    },
    {
      "name": "trial_searcher",
      "description": "Search ClinicalTrials.gov for clinical studies.\n\nComprehensive search tool for finding clinical trials based on multiple criteria.\nSupports filtering by conditions, interventions, location, phase, and eligibility.\n\nLocation search notes:\n- Use either location term OR lat/long coordinates, not both\n- For city-based searches, AI agents should geocode to lat/long first\n- Distance parameter only works with lat/long coordinates\n\nReturns a formatted list of matching trials with key details.\n",
      "server": "BioMCP-Server",
      "required_params": [
        "conditions(list[string]|string|None): Medical conditions to search for",
        "interventions(list[string]|string|None): Treatment interventions to search for",
        "other_terms(list[string]|string|None): Additional search terms",
        "recruiting_status(\"OPEN\"|\"CLOSED\"|\"ANY\"|None): Filter by recruiting status",
        "phase(\"EARLY_PHASE1\"|\"PHASE1\"|\"PHASE2\"|\"PHASE3\"|\"PHASE4\"|\"NOT_APPLICABLE\"|None): Filter by clinical trial phase",
        "location(string|None): Location term for geographic filtering",
        "lat(float|None): Latitude for location-based search",
        "long(float|None): Longitude for location-based search",
        "distance(int|None): Distance in miles from lat/long coordinates",
        "age_group(\"CHILD\"|\"ADULT\"|\"OLDER_ADULT\"|None): Filter by age group",
        "sex(\"FEMALE\"|\"MALE\"|\"ALL\"|None): Filter by biological sex",
        "healthy_volunteers(\"YES\"|\"NO\"|None): Filter by healthy volunteer eligibility",
        "study_type(\"INTERVENTIONAL\"|\"OBSERVATIONAL\"|\"EXPANDED_ACCESS\"|None): Filter by study type",
        "funder_type(\"NIH\"|\"OTHER_GOV\"|\"INDUSTRY\"|\"OTHER\"|None): Filter by funding source"
      ],
      "example": "<code>\nresult = trial_searcher(conditions='melanoma')\nprint(result) # print return results for analysis\n</code>",
      "domain": "bio"
    },
    {
      "name": "trial_getter",
      "description": "Fetch comprehensive details for a specific clinical trial.\n\nRetrieves all available information for a clinical trial by its NCT ID.\nThis includes protocol details, locations, outcomes, and references.\n\nFor specific sections only, use the specialized getter tools:\n- trial_protocol_getter: Core protocol information\n- trial_locations_getter: Site locations and contacts\n- trial_outcomes_getter: Primary/secondary outcomes and results\n- trial_references_getter: Publications and references\n",
      "server": "BioMCP-Server",
      "required_params": [
        "nct_id(string): Nct Id"
      ],
      "example": "<code>\nresult = trial_getter(nct_id='NCT04280705')\nprint(result) # print return results for analysis\n</code>",
      "domain": "bio"
    },
    {
      "name": "trial_protocol_getter",
      "description": "Fetch core protocol information for a clinical trial.\n\nRetrieves essential protocol details including:\n- Official title and brief summary\n- Study status and sponsor information\n- Study design (type, phase, allocation, masking)\n- Eligibility criteria\n- Primary completion date\n",
      "server": "BioMCP-Server",
      "required_params": [
        "nct_id(string): Nct Id"
      ],
      "example": "<code>\nresult = trial_protocol_getter(nct_id='NCT04280705')\nprint(result) # print return results for analysis\n</code>",
      "domain": "bio"
    },
    {
      "name": "trial_references_getter",
      "description": "Fetch publications and references for a clinical trial.\n\nRetrieves all linked publications including:\n- Published results papers\n- Background literature\n- Protocol publications\n- Related analyses\n\nIncludes PubMed IDs when available for easy cross-referencing.\n",
      "server": "BioMCP-Server",
      "required_params": [
        "nct_id(string): Nct Id"
      ],
      "example": "<code>\nresult = trial_references_getter(nct_id='NCT04280705')\nprint(result) # print return results for analysis\n</code>",
      "domain": "bio"
    },
    {
      "name": "trial_outcomes_getter",
      "description": "Fetch outcome measures and results for a clinical trial.\n\nRetrieves detailed outcome information including:\n- Primary outcome measures\n- Secondary outcome measures\n- Results data (if available)\n- Adverse events (if reported)\n\nNote: Results are only available for completed trials that have posted data.\n",
      "server": "BioMCP-Server",
      "required_params": [
        "nct_id(string): Nct Id"
      ],
      "example": "<code>\nresult = trial_outcomes_getter(nct_id='NCT04280705')\nprint(result) # print return results for analysis\n</code>",
      "domain": "bio"
    },
    {
      "name": "trial_locations_getter",
      "description": "Fetch contact and location details for a clinical trial.\n\nRetrieves all study locations including:\n- Facility names and addresses\n- Principal investigator information\n- Contact details (when recruiting)\n- Recruitment status by site\n\nUseful for finding trials near specific locations or contacting study teams.\n",
      "server": "BioMCP-Server",
      "required_params": [
        "nct_id(string): Nct Id"
      ],
      "example": "<code>\nresult = trial_locations_getter(nct_id='NCT04280705')\nprint(result) # print return results for analysis\n</code>",
      "domain": "bio"
    },
    {
      "name": "variant_searcher",
      "description": "Search MyVariant.info for genetic variant DATABASE RECORDS.\n\nImportant: This searches for variant DATABASE RECORDS (frequency, significance, etc.),\nNOT articles about variants. For articles about variants, use article_searcher.\n\nSearches the comprehensive variant database including:\n- Population frequencies (gnomAD, 1000 Genomes, etc.)\n- Clinical significance (ClinVar)\n- Functional predictions (SIFT, PolyPhen, CADD)\n- Gene and protein consequences\n\nSearch by various identifiers or filter by clinical/functional criteria.\n",
      "server": "BioMCP-Server",
      "required_params": [
        "gene(string|None): Gene symbol (e.g., 'BRAF', 'TP53')",
        "hgvs(string|None): HGVS notation (genomic, coding, or protein)",
        "hgvsp(string|None): Protein change in HGVS format (e.g., 'p.V600E')",
        "hgvsc(string|None): Coding sequence change (e.g., 'c.1799T>A')",
        "rsid(string|None): dbSNP rsID (e.g., 'rs113488022')",
        "region(string|None): Genomic region (e.g., 'chr7:140753336-140753337')",
        "significance('pathogenic'|'likely_pathogenic'|'uncertain_significance'|'likely_benign'|'benign'|'conflicting'|None): Clinical significance filter",
        "frequency_min(float|None): Minimum allele frequency",
        "frequency_max(float|None): Maximum allele frequency",
        "consequence(string|None): Variant consequence (e.g., 'missense_variant')",
        "cadd_score_min(float|None): Minimum CADD score for pathogenicity",
        "sift_prediction('deleterious'|'tolerated'|None): SIFT functional prediction",
        "polyphen_prediction('probably_damaging'|'possibly_damaging'|'benign'|None): PolyPhen-2 functional prediction",
        "include_cbioportal(bool): Include cBioPortal cancer genomics summary when searching by gene",
        "page(int): Page number (1-based)",
        "page_size(int): Results per page"
      ],
      "example": "<code>\nresult = variant_searcher(‘BRAF V600E)\nprint(result) # print return results for analysis\n</code>",
      "domain": "bio"
    },
    {
      "name": "variant_getter",
      "description": "Fetch comprehensive details for a specific genetic variant.\n\nRetrieves all available information for a variant including:\n- Gene location and consequences\n- Population frequencies across databases\n- Clinical significance from ClinVar\n- Functional predictions\n- External annotations (TCGA cancer data, conservation scores)\n\nAccepts various ID formats:\n- HGVS: NM_004333.4:c.1799T>A\n- rsID: rs113488022\n- MyVariant ID: chr7:g.140753336A>T\n",
      "server": "BioMCP-Server",
      "required_params": [
        "variant_id(string): Variant Id"
      ],
      "example": "<code>\nresult = variant_getter(variant_id='1234567890')\nprint(result) # print return results for analysis\n</code>",
      "domain": "bio"
    },
    {
      "name": "gene_getter",
      "description": "Get gene information from MyGene.info, including official name, aliases, genomic location, and database links.",
      "server": "BioMCP-Server",
      "required_params": [
        "gene_id_or_symbol(string): Gene symbol or Entrez ID"
      ],
      "example": "<code>\nresult = gene_getter(gene_id_or_symbol=\"TP53\")\nprint(result)\n</code>",
      "domain": "bio"
    },
    {
      "name": "disease_getter",
      "description": "Get disease information from MyDisease.info, including definition, synonyms, ontology IDs, and phenotypes.",
      "server": "BioMCP-Server",
      "required_params": [
        "disease_id_or_name(string): Disease name or ontology ID (e.g., MONDO/DOID)"
      ],
      "example": "<code>\nresult = disease_getter(disease_id_or_name=\"Alzheimer disease\")\nprint(result)\n</code>",
      "domain": "bio"
    },
    {
      "name": "drug_getter",
      "description": "Get drug or chemical information from MyChem.info, including structure, mechanism, indications, trade names, and identifiers.",
      "server": "BioMCP-Server",
      "required_params": [
        "drug_id_or_name(string): Drug name or database ID"
      ],
      "example": "<code>\nresult = drug_getter(drug_id_or_name=\"aspirin\")\nprint(result)\n</code>",
      "domain": "bio"
    }, 
    {
      "name": "web_search",
      "description": "Search the web for information.\n\nUse this tool to search the web for information. This tool will return the search results in a string format.\n",
      "server": "Web-Server",
      "required_params": [
        "query(string): query to search for"
      ],
      "example": "<code>\nresult = web_search(query='BRAF mutations in melanoma')\nprint(result) # print return results for analysis\n</code>",
      "domain": "web"
    },
    {
      "name": "web_parse",
      "description": "Parse the web for information.\n\nUse this tool to parse the web for information. This tool will return the parsed results in a string format.\n",
      "server": "Web-Server",
      "required_params": [
        "link(string): URL to parse",
        "user_prompt(string): Query to parse"
      ],
      "example": "<code>\nresult = web_parse(link='https://en.wikipedia.org/wiki/Chris_Wilder', user_prompt='Was Chris Wilder a youth player at the club he managed in 2001? Also, when and where did he meet his spouse?')\nprint(result) # print return results for analysis\n</code>",
      "domain": "web"
    },
    {
      "name": "web_parse",
      "description": "Parse the image for information.\n\nUse this tool to parse the image for information. This tool will return the parsed results in a string format.\n",
      "server": "Web-Server",
      "required_params": [
        "link(string): URL to parse",
        "user_prompt(string): Query to parse"
      ],
      "example": "<code>\nresult = web_parse(link='https://upload.wikimedia.org/wikipedia/commons/6/6d/Lantian_Man_skull_and_jaw.jpg', user_prompt='What is the main color of this image?')\nprint(result) # print return results for analysis\n</code>",
      "domain": "video"
    },
    {
      "name": "web_search",
      "description": "Only support to check if the company has correspoding stock ticker symbol, and corresponding section it belongs to\n",
      "server": "Web-Server",
      "required_params": [
        "query(string): query to search for, such as 'What is the stock ticker symbol of Apple'"
      ],
      "example": "<code>\nresult = web_search(query='What is the stock ticker symbol of Apple')\nprint(result) # print return results for analysis\n</code>",
      "domain": "video"
    },
    {
      "name": "google_search_images",
      "description": "Search Google Images for images.\n\nUse this tool to search Google Images for images. This tool will return the search results in a string format.\n",
      "server": "Serper-Server",
      "required_params": [
        "q(string): query to search for"
      ],
      "example": "<code>\nresult = google_search_images(q='BRAF mutations in melanoma')\nprint(result) # print return results for analysis\n</code>",
      "domain": "video"
    },
    {
      "name": "google_search_videos",
      "description": "Search Google Videos for videos.\n\nUse this tool to search Google Videos for videos. This tool will return the search results in a string format.\n",
      "server": "Serper-Server",
      "required_params": [
        "q(string): query to search for"
      ],
      "example": "<code>\nresult = google_search_videos(q='BRAF mutations in melanoma')\nprint(result) # print return results for analysis\n</code>",
      "domain": "video"
    },
    {
      "name": "search_videos",
      "description": "Search for YouTube videos with advanced filtering options",
      "server": "YouTube-Server",
      "required_params": [
        "query(string): Query"
      ],
      "example": "<code>\nresult = search_videos(query='BRAF mutations in melanoma')\nprint(result) # print return results for analysis\n</code>",
      "domain": "video"
    },
    {
      "name": "get_video_details",
      "description": "Get detailed information about a YouTube video",
      "server": "YouTube-Server",
      "required_params": [
        "video_id(string): Video Id"
      ],
      "example": "<code>\nresult = get_video_transcript(video_id='1234567890')\nprint(result) # print return results for analysis\n</code>",
      "domain": "video"
    },
    {
      "name": "get_channel_details",
      "description": "Get detailed information about a YouTube channel",
      "server": "YouTube-Server",
      "required_params": [
        "channel_name(string): Channel Name"
      ],
      "example": "<code>\nresult = get_channel_details(channel_name='1234567890')\nprint(result) # print return results for analysis\n</code>", 
      "domain": "video"
    },
    {
      "name": "get_video_comments",
      "description": "Get comments for a YouTube video",
      "server": "YouTube-Server",
      "required_params": [
        "video_id(string): Video Id"
      ],
      "example": "<code>\nresult = get_video_comments(video_id='1234567890')\nprint(result) # print return results for analysis\n</code>",
      "domain": "video"
    },
    {
      "name": "get_video_transcript",
      "description": "Get transcript for a YouTube video",
      "server": "YouTube-Server",
      "required_params": [
        "video_id(string): Video Id",
        "language(string): Language Code"
      ],
      "example": "<code>\nresult = get_video_transcript(video_id='1234567890', language='en')\nprint(result) # print return results for analysis\n</code>",
      "domain": "video"
    },
    {
      "name": "get_related_videos",
      "description": "Get related videos for a YouTube video",
      "server": "YouTube-Server",
      "required_params": [
        "video_id(string): Video Id"
      ],
      "example": "<code>\nresult = get_related_videos(video_id='1234567890')\nprint(result) # print return results for analysis\n</code>",
      "domain": "video"
    },
    {
      "name": "get_trending_videos",
      "description": "Get trending videos on YouTube by region",
      "server": "YouTube-Server",
      "required_params": [
        "region_code(string): Region Code"
      ],
      "example": "<code>\nresult = get_trending_videos(region_code='ko')\nprint(result) # print return results for analysis\n</code>",
      "domain": "video"
    },
    {
      "name": "get_video_enhanced_transcript",
      "description": "Advanced transcript extraction tool with filtering, search, and multi-video capabilities. Provides rich transcript data for detailed analysis and processing. Features: 1) Extract transcripts from multiple videos; 2) Filter by time ranges; 3) Search within transcripts; 4) Segment transcripts; 5) Format output in different ways; 6) Include video metadata.",
      "server": "YouTube-Server",
      "required_params": [
        "video_ids(string): Video Id"
      ],
      "example": "<code>\nresult = get_video_enhanced_transcript(video_ids='1234567890')\nprint(result) # print return results for analysis\n</code>", 
      "domain": "video"
    },
    {
      "name": "googlemap_search_places",
      "description": "Performs a basic fuzzy search for places using Google Maps. Returns general information such as title, address, rating, coordinates, price, phone, website, operating hours, and service options.\n\nArgs:\n    query (str): Search query (e.g., 'pizza restaurant in London', 'High School in Nanjing').\n    max_results (int, optional): Maximum number of results to return (default 10).\n    structured (bool, optional): If true, returns structured list of dicts, otherwise returns formatted string.\n\nReturns:\n    list[dict] | str: Either a list of dictionaries with place details or a formatted string.",
      "server": "google-maps",
      "required_params": [
        "query(string): Search query"
      ],
      "example": "<code>\nresult = googlemap_search_places(query='coffee shop in San Francisco', max_results=5)\nprint(result)\n</code>",
      "domain": "map"
    },
    {
      "name": "google_map_get_place_details",
      "description": "Retrieves detailed information about a specific place on Google Maps based on a search query or an accurate place_id. Includes rating summaries, user reviews, popular times, and extensions.\n\nArgs:\n    query (str): A search query or an accurate place_id depending on is_accurate_id.\n    is_accurate_id (bool, optional): If true, query is treated as a place_id directly. If false, performs a search first (default False).\n\nReturns:\n    str: JSON-formatted string containing detailed place information.",
      "server": "google-maps",
      "required_params": [
        "query(string): Place name or place_id"
      ],
      "example": "<code>\nresult = google_map_get_place_details(query='Eiffel Tower')\nprint(result)\n</code>",
      "domain": "map"
    },
    {
      "name": "google_map_get_place_id",
      "description": "Returns only the place IDs for places matching the search query on Google Maps.\n\nArgs:\n    query (str): Search query (e.g., 'library in Boston').\n    max_results (int, optional): Maximum number of results to return (default 10).\n\nReturns:\n    list[dict] | str: A list of dictionaries with 'name' and 'place_id' for each match or an error string.",
      "server": "google-maps",
      "required_params": [
        "query(string): Search query"
      ],
      "example": "<code>\nresult = google_map_get_place_id(query='museum in New York', max_results=3)\nprint(result)\n</code>",
      "domain": "map"
    },
    {
      "name": "google_map_get_map_direction",
      "description": "Fetches step-by-step travel directions between two locations using Google Maps Directions API.\n\nArgs:\n    start (str): Origin address.\n    end (str): Destination address.\n    travel_mode (int, optional): Travel mode code (6=Best(Default), 0=Driving, 9=Two-wheeler, 3=Transit, 2=Walking, 1=Cycling, 4=Flight).\n\nReturns:\n    str: A formatted string with travel directions, duration, and distance.",
      "server": "google-maps",
      "required_params": [
        "start(string): Origin address",
        "end(string): Destination address"
      ],
      "example": "<code>\nresult = google_map_get_map_direction(start='San Francisco', end='Los Angeles', travel_mode=0)\nprint(result)\n</code>",
      "domain": "map"
    }
]